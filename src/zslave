#!/usr/bin/env bash
#
#	zslave
#
#	Watches for fresh zfs send streams sent from remote machine.
#	Updates local zfs filesystems to match the remote system.
#
#
#
#	Tristram Scott
#	21/10/2014

ZFS=/sbin/zfs
SCP=/usr/bin/scp
SSH=/usr/bin/ssh
DATE=/bin/date


zdir1=
streamdir=/tmpbackup1
logfile=
timestamp=stor-pri-02
zroot=
verstr='1.0'
tmpfileroot=/tmp/zslave.$$
#
# Shouldn't need to modify below here
#
sfn=${0##*/} # Short version of our filename
verb=1
showhelp=0
sleeptime=600
maxit=10000000
eqeq='==========\n'
plpl='++++++++++\n'
sep='_i_'
stamponexit=0
catchup=0

#
# qecho Echoes argument if verbose mode is on.
# Also writes to logfile.
#
qecho() {
if [ $verb -ne 0 ] ; then
printf '%b' "$@"
fi
if [ $logfile ] ; then
printf '%b' "$@"  >> $logfile
fi
}

#
# verecho	Echoes version string.
#
verecho() {

qecho "\nThis is $0, $verstr\nStarting at `$DATE`\n"  
}

#
# showusage	Command line help message
#
showusage() {

verecho
cat << EOF
Usage: \
	$sfn -rkzplsxq
	$sfn -h
	$sfn -v
	
Most flags require arguments.
	
	-r rootdir for dump streams. e.g. -r /tmpbackup1
	-k timestampfile. e.g. -k koala
	-z zfs filesystem to restore. e.g. -z vbox -z dbdata2 -z dblog2
	-p root zfs filesystem e.g. zbackup/clones/
	-l Logfile. e.g. -l /var/tmp/zfsrestore.log
	-I use archive streams (_I_) instead of the default of incrementals (_i_).
	-C catchup mode.  Works through monthly, weekly then daily.  Use with -I.
	-s Loop sleep time, in seconds. e.g. -s 600
	-x Maximum number of iterations. e.g. -x 5
	-q Quiet 
	-h Show detailed usage.
	-v Print the version number and then exit.
	
EOF

if [ $showhelp -eq 1 ] ; then

cat << EOF
Examples: 

Monitor the /tmpbackup1 directory for zfs systems vbox, dbdata2 and 
dblog2, logging to /var/tmp/zfsrestore.log

	$sfn -r /tmpbackup1 -z vbox -z dbdata2 -z dblog2 -l \\
		/var/tmp/zfsrestore.log

Catchup everything since 15:32:16 on 15 March 2017 for the owncloud file system.

	touch -d 2017-03-15T15:32:16 stor-bkp-01.owncloud
	$sfn -r /mnt/stor-snap-02/stor-pri-02 \\
		-p stor-bkp-01/stor-pri-02/ -s 10 -x 1 \\
		-l /var/log/zslave.owncloud.log -z owncloud -q	\\
		-I -C 

EOF

fi
}

#
# Parse command line arguments
#
while getopts r:z:p:l:s:x:k:vhqIC c
do
	case $c in
	l)	logfile=$OPTARG;;
	r)	streamdir=$OPTARG;;
	k)	timestamp=$OPTARG;;
	p)	zroot=$OPTARG;;
	z)	zdir1="$zdir1 $OPTARG";;
	s)	sleeptime=$OPTARG;;
	x)	maxit=$OPTARG;;
	q)  verb=0;;
	I)	sep='_I_';;
	C)	catchup=1;;
	v)	
		verb=1
		verecho
		exit 1;;
	h)	
		showhelp=1
		showusage
		exit 1;;
	\?)	
		showusage
		exit 1;;
	esac
done


updated=$streamdir/`hostname -s`
received=$streamdir/$timestamp
# supdated is just the part after the last /, i.e the hostname from above.
supdated=`echo "$updated" | sed -e 's/.*\///'`


if [ $verb -ne 0 ] ; then
	ZFSR="$ZFS receive -vF -e "
else
	ZFSR="$ZFS receive -F -e "
fi


#
# Announce ourselves
#
verecho

#
# Report settings
#
qecho "streamdir is $streamdir\n"
qecho "zdir1 is $zdir1\n"
qecho "sleeptime is $sleeptime\n"
qecho "maxit is $maxit\n"
qecho "received is $received\n"
qecho "zroot is $zroot\n"
qecho "separator is $sep\n"
qecho "catchup is $catchup\n"

k=0
while [ $k -lt $maxit ]
do
	qecho "$eqeq`$DATE`: Beginning iteration $k of $maxit.\n\n"
	for zdir in $zdir1;
	do
		# uzdir has the forward slashes replaced by underscores, and the 
		# trailing underscore (if any) removed.
		uzdir=`echo $zdir | sed -e "s/\//_/g" | sed -e "s/_$//"`
		# szdir has the part after the last slash deleted.
		szdir=`echo $zroot$zdir | sed -e "s/\(.*\)\/\(.*\)/\1/"`
		if [[ $received -nt ${updated}.${uzdir} ]];
		then
			qecho "`$DATE`: $received is newer than ${updated}.${uzdir}.\n"
			# We put the file list into a temporary file, and note the time now.
			# The file list is sorted by date.  The first sed includes all lines
			# with uzdir and also the two time stamps.  The second sed command
			# includes only those lines between the two time stamps.
			if [[ $catchup -eq 0 ]];
			then 
				# Not catchup mode.  Snapshots are processed in the order they come.
				now=`date +%Y-%m-%dT%T`
				ls -rt $streamdir | sed -n \
					"/${uzdir}@.*${sep}@/p ; /^${supdated}.${uzdir}$/p ; /^${timestamp}$/p" \
					| sed -e "1,/^${supdated}.${uzdir}$/d ; /^${timestamp}$/d" \
					> ${tmpfileroot}.${uzdir}
				numstreams="`cat ${tmpfileroot}.${uzdir} | wc -l`"
				qecho "Looks like we have ${numstreams} new streams to apply.\n"
				for fname in  `cat ${tmpfileroot}.${uzdir}`  ;
				do
					qecho "$fname is new\n"
					qecho "cat ${streamdir}/${fname} | $ZFSR $szdir\n" 
					if [ $logfile ] ; then
						cat ${streamdir}/${fname} | $ZFSR $szdir >> $logfile
					else
						cat ${streamdir}/${fname} | $ZFSR $szdir 
					fi
				done
			else
				# Catchup mode. Snapshots processed in greedy mode, monthly then weekly then daily.
				# We sort the streams at the end to ensure date order by name, rather than file modified.
				# The two are usually, but not always, the same.
				ls -rt $streamdir | sed -n \
					"/${uzdir}@.*${sep}@/p ; /^${supdated}.${uzdir}$/p ; /^${timestamp}$/p" \
					| sed -e "1,/^${supdated}.${uzdir}$/d ; /^${timestamp}$/d" | sort \
					> ${tmpfileroot}.${uzdir}
				# Find the starting snapshot.  This should be the one our oldest monthly
				# originates from.
				f1=`cat ${tmpfileroot}.${uzdir} | head -1 | sed -e "s/^${sn}@\(zfs-auto-snap.*\)${sep}.*/\1/"`
				while [ ! -z "$f1" ] ; 
				do
					fname=`cat ${tmpfileroot}.${uzdir} | sed -n  /^${sn}\@${f1}_I_/p |tail -1`
					f1=`cat ${tmpfileroot}.${uzdir} | sed -n  /^${sn}\@${f1}_I_/p |tail -1 |  sed -e 's/.*_I_@\(zfs-auto-snap_.*\)_.*/\1/'` ;     
					qecho "Attempting to use $fname to bring us up to $f1\n"
					qecho "cat ${streamdir}/${fname} | $ZFSR $szdir\n" 
					if [ $logfile ] ; then
						cat ${streamdir}/${fname} | $ZFSR $szdir >> $logfile
					else
						cat ${streamdir}/${fname} | $ZFSR $szdir 
					fi
				done
				# We set the timestamp to be one second after the last modified time of the 
				# final stream.
				now=$(date -r $((`ls -lD %s  ${streamdir}/${fname} | sed -e 's/ [ ]/ /g' | cut -f6 -d' '` + 1)) +%Y-%m-%dT%T)

			fi
			# We update the timestamp (for this uzdir) with the time that we listed the
			# files, noted just above the for loop.
			touch -d ${now} ${updated}.${uzdir}
			qecho "`ls -lD %Y-%m-%dT%T  ${updated}.${uzdir}`\n"
			# Tidy up
			rm ${tmpfileroot}.${uzdir}
		else
			qecho "`$DATE`: Nothing to do for ${zdir}.\n"
		fi
	done
	qecho "$eqeq`$DATE`: End of iteration $k of $maxit.  Sleeping for $sleeptime.\n\n"
	sleep $sleeptime
	k=$(($k+1))
done

if [[ ! $k -lt $maxit ]] ;
then
	qecho "Maximum iteration count reached.\n"
fi

qecho "`$DATE`: Exiting.\n"

